<!DOCTYPE html>
<html itemscope itemtype="http:schema.org/place" lang="en">
<meta content="initial-scale=1.0, maximal-scale=1.0, minimun-sclae=1.0, user-scalable=no" name="viewport">
<meta charset="Utf-8">
<meta content="chrome=1" http-equiv="X-UA-Compatible">
  <head>
    <style type="text/css">
      html,
      body {
        font-family: Arial, sans-serif;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .container {
        height: 100%;
        position: relative;
      }

      input {
        font-size: 12px;
      }

      h1 {
        color: #4d90fe;
        font-size: 22px;
        margin: 0 0 10px 0;
        text-align: center;
      }

      #hide-listings,
      #show-listings {
        width: 48%;
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      hr {
        background: #D0D7D9;
        height: 1px;
        margin: 20px 0 20px 0;
        border: none;
      }

      #map {
        bottom:0px;
        height: 100%;
        left: 362px;
        position: absolute;
        right: 0px;
      }

      .options-box {
        background: #fff;
        border: 1px solid #999;
        border-radius: 3px;
        height: 100%;
        line-height: 35px;
        padding: 10px 10px 30px 10px;
        text-align: left;
        width: 340px;
      }

      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      .pac-container {
        font-family: Roboto;
      }

      #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pano {
        width: 200px;
        height: 200px;
      }

      #places-search,
      #search-within-time-text {
        width: 84%;
      }

      .text {
        font-size: 12px;
      }

      #toggle-drawing {
        width: 27%;
        color: #4d90fe;
        position: relative;
        margin-left: 10px;
      }

      #zoom-to-area-text {
        width: 70%;
      }

      #search-within-time {
        color: #4d90fe;
      }

      #zoom-to-area {
        width: 24%;
        color: #4d90fe;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="options-box">
        <h1>My Neighborhood Map</h1>
      <div>
          <input id="show-listings" type="button" value="Show Listings">
          <input id="hide-listings" type="button" value="Hide Listings">
          <hr>
          <input id="toggle-drawing"  type="button" value="Tools Bar">
        </div>
        <hr>
        <div>
          <input id="zoom-to-area-text" type="text" placeholder="Enter destination!">
          <input id="zoom-to-area" type="button" value="Zoom">
        </div>
        <hr>
        <div>
          <span class="text"> Within </span>
          <select id="max-duration">
            <option value="10">0 - 10 min</option>
            <option value="15">15 min</option>
            <option value="30">30 min</option>
            <option value="60">1 hour</option>
          </select>
          <select id="mode">
            <option value="DRIVING">drive</option>
            <option value="WALKING">walk</option>
            <option value="BICYCLING">bike</option>
            <option value="WALK">jog/run</option>
          </select>
          <span class="text">of</span>
          <input id="search-within-time-text" type="text" placeholder="e.g: Compare Supermarket, Providence, Deltona, FL">
          <input id="search-within-time" type="button" value="Go">
        </div>
        <hr>
      </div>
      <div id="map"></div>
    </div>
    <script>
      var map;
        function initMap() {
          Map = new google.maps.map(document.getElementById('map'),{
            center: {lat: 28.9288298, lng: -81.2354897},
            zoom:13
        });
      var infowindow = new google.maps.infowindow( {
        content:'Do you ever feel an InfoWindow, floating through the wind,' + 'ready to start again?'
      });
    }

      var markers = [];

      var polygon = null;

  
      var placeMarkers = [];

      function initMap() {
        
        var styles = [
          {
            featureType: 'water',
            stylers: [
              { color: '#19a0d8' }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.stroke',
            stylers: [
              { color: '#ffffff' },
              { weight: 6 }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.fill',
            stylers: [
              { color: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.stroke',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -40 }
            ]
          },{
            featureType: 'transit.station',
            stylers: [
              { weight: 9 },
              { hue: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'labels.icon',
            stylers: [
              { visibility: 'off' }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.stroke',
            stylers: [
              { lightness: 100 }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.fill',
            stylers: [
              { lightness: -100 }
            ]
          },{
            featureType: 'poi',
            elementType: 'geometry',
            stylers: [
              { visibility: 'on' },
              { color: '#f0e4d3' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.fill',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -25 }
            ]
          }
        ];

        
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 28.9288298, lng: -81.2354897},
          zoom: 13,
          styles: styles,
          mapTypeControl: false
        });

        
        var timeAutocomplete = new google.maps.places.Autocomplete(
            document.getElementById('search-within-time-text'));
        var zoomAutocomplete = new google.maps.places.Autocomplete(
            document.getElementById('zoom-to-area-text'));
        zoomAutocomplete.bindTo('bounds', map);
        var searchBox = new google.maps.places.SearchBox(
            document.getElementById('places-search'));
        searchBox.setBounds(map.getBounds());

        var locations = [
          {title: 'Stephen Home', location: {lat: 28.9288298, lng: -81.2354897}},
          {title: 'RaceTrac', location: {lat: 28.9478792, lng: -81.2517882}},
          {title: 'Dunkin Donuts', location: {lat: 28.9336987, lng: -81.2521422}},
          {title: 'Epic Theatre', location: {lat: 28.9336987, lng: -81.2521422}},
          {title: 'Deltona Gulf-Club', location: {lat: 28.9227577, lng: -81.2444269}},
          {title: 'Deltona Library', location: {lat: 28.9277695, lng: -81.231004}}
        ];

        var largeInfowindow = new google.maps.InfoWindow();

        var drawingManager = new google.maps.drawing.DrawingManager({
          drawingMode: google.maps.drawing.OverlayType.POLYGON,
          drawingControl: true,
          drawingControlOptions: {
            position: google.maps.ControlPosition.TOP_LEFT,
            drawingModes: [
              google.maps.drawing.OverlayType.POLYGON
            ]
          }
        });

        var defaultIcon = makeMarkerIcon('0091ff');
        var highlightedIcon = makeMarkerIcon('FFFF24');

        for (var i = 0; i < locations.length; i++) {
          var position = locations[i].location;
          var title = locations[i].title;
          var marker = new google.maps.Marker({
            position: position,
            title: title,
            animation: google.maps.Animation.DROP,
            icon: defaultIcon,
            id: i
          });
           markers.push(marker);
          marker.addListener('click', function() {
            populateInfoWindow(this, largeInfowindow);
          });
          marker.addListener('mouseover', function() {
            this.setIcon(highlightedIcon);
          });
          marker.addListener('mouseout', function() {
            this.setIcon(defaultIcon);
          });
        }

        document.getElementById('show-listings').addEventListener('click', showListings);
        document.getElementById('hide-listings').addEventListener('click', function() {
          hideMarkers(markers);
        });

        document.getElementById('toggle-drawing').addEventListener('click', function() {
          toggleDrawing(drawingManager);
        });

        document.getElementById('zoom-to-area').addEventListener('click', function() {
          zoomToArea();
        });

        document.getElementById('search-within-time').addEventListener('click', function() {
          searchWithinTime();
        });

        searchBox.addListener('places_changed', function() {
          searchBoxPlaces(this);
        });

       
        document.getElementById('go-places').addEventListener('click', textSearchPlaces);

        drawingManager.addListener('overlaycomplete', function(event) {
          if (polygon) {
            polygon.setMap(null);
            hideMarkers(markers);
          }
        
          drawingManager.setDrawingMode(null);
          polygon = event.overlay;
          polygon.setEditable(true);
          searchWithinPolygon(polygon);
          polygon.getPath().addListener('set_at', searchWithinPolygon);
          polygon.getPath().addListener('insert_at', searchWithinPolygon);
        });
      }

   
      function populateInfoWindow(marker, infowindow) {
        if (infowindow.marker != marker) {
          infowindow.marker = marker;
          infowindow.setContent('<div>'+ marker.title + '</div>');
          infowindow.open(map, marker);
          infowindow.addListener('closeclick', function() {
            infowindow.Setmarker = null;
          });
          var streetViewService = new google.maps.StreetViewService();
          var radius = 50;
         
          function getStreetView(data, status) {
            if (status == google.maps.StreetViewStatus.OK) {
              var nearStreetViewLocation = data.location.latLng;
              var heading = google.maps.geometry.spherical.computeHeading(
                nearStreetViewLocation, marker.position);
                infowindow.setContent('<div>' + marker.title + '</div><div id="pano"></div>');
                var panoramaOptions = {
                  position: nearStreetViewLocation,
                  pov: {
                    heading: heading,
                    pitch: 30
                  }
                };
              var panorama = new google.maps.StreetViewPanorama(
                document.getElementById('pano'), panoramaOptions);
            } else {
              infowindow.setContent('<div>' + marker.title + '</div>' +
                '<div>No Street View Found</div>');
            }
          }
        
          streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);
          infowindow.open(map, marker);
        }
      }

      function showListings() {
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
          bounds.extend(markers[i].position);
        }
        map.fitBounds(bounds);
      }

      function hideMarkers(markers) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
      }

      function makeMarkerIcon(markerColor) {
        var markerImage = new google.maps.MarkerImage(
          'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
          '|40|_|%E2%80%A2',
          new google.maps.Size(21, 34),
          new google.maps.Point(0, 0),
          new google.maps.Point(10, 34),
          new google.maps.Size(21,34));
        return markerImage;
      }

    
      function toggleDrawing(drawingManager) {
        if (drawingManager.map) {
          drawingManager.setMap(null);
          if (polygon !== null) {
            polygon.setMap(null);
          }
        } else {
          drawingManager.setMap(map);
        }
      }

      
      function searchWithinPolygon() {
        for (var i = 0; i < markers.length; i++) {
          if (google.maps.geometry.poly.containsLocation(markers[i].position, polygon)) {
            markers[i].setMap(map);
          } else {
            markers[i].setMap(null);
          }
        }
      }

    
      function zoomToArea() {
        var geocoder = new google.maps.Geocoder();
        var address = document.getElementById('zoom-to-area-text').value;
        if (address == '') {
          window.alert('You must enter an area, or address.');
        } else {
          
          geocoder.geocode(
            { address: address,
              componentRestrictions: {locality: 'Deltona'}
            }, function(results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                map.setZoom(15);
              } else {
                window.alert('We could not find that location - try entering a more' +
                    ' specific place.');
              }
            });
          }
        }

    
      function searchWithinTime() {
        var distanceMatrixService = new google.maps.DistanceMatrixService;
        var address = document.getElementById('search-within-time-text').value;
          if (address == '') {
          window.alert('You must enter an address.');
        } else {
          hideMarkers(markers);
          
          var origins = [];
          for (var i = 0; i < markers.length; i++) {
            origins[i] = markers[i].position;
          }
          var destination = address;
          var mode = document.getElementById('mode').value;
         
          distanceMatrixService.getDistanceMatrix({
            origins: origins,
            destinations: [destination],
            travelMode: google.maps.TravelMode[mode],
            unitSystem: google.maps.UnitSystem.IMPERIAL,
          }, function(response, status) {
            if (status !== google.maps.DistanceMatrixStatus.OK) {
              window.alert('Error was: ' + status);
            } else {
              displayMarkersWithinTime(response);
            }
          });
        }
      }

      function displayMarkersWithinTime(response) {
        var maxDuration = document.getElementById('max-duration').value;
        var origins = response.originAddresses;
        var destinations = response.destinationAddresses;
      
        var atLeastOne = false;
        for (var i = 0; i < origins.length; i++) {
          var results = response.rows[i].elements;
          for (var j = 0; j < results.length; j++) {
            var element = results[j];
            if (element.status === "OK") {
             
              var distanceText = element.distance.text;
             
              var duration = element.duration.value / 60;
              var durationText = element.duration.text;
              if (duration <= maxDuration) {
              
                markers[i].setMap(map);
                atLeastOne = true;
               
                var infowindow = new google.maps.InfoWindow({
                  content: durationText + ' away, ' + distanceText +
                    '<div><input type=\"button\" value=\"View Route\" onclick =' +
                    '\"displayDirections(&quot;' + origins[i] + '&quot;);\"></input></div>'
                });
                infowindow.open(map, markers[i]);
                markers[i].infowindow = infowindow;
                google.maps.event.addListener(markers[i], 'click', function() {
                  this.infowindow.close();
                });
              }
            }
          }
        }
        if (!atLeastOne) {
          window.alert('We could not find any locations within that distance!');
        }
      }

   
      function displayDirections(origin) {
        hideMarkers(markers);
        var directionsService = new google.maps.DirectionsService;

        var destinationAddress =
            document.getElementById('search-within-time-text').value;
      
        var mode = document.getElementById('mode').value;
        directionsService.route({
          origin: origin,
          destination: destinationAddress,
          travelMode: google.maps.TravelMode[mode]
        }, function(response, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            var directionsDisplay = new google.maps.DirectionsRenderer({
              map: map,
              directions: response,
              draggable: true,
              polylineOptions: {
                strokeColor: 'green'
              }
            });
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      
      function displayDirections(origin) {
        hideMarkers(markers);
        var directionsService = new google.maps.DirectionsService;
        
        var destinationAddress =
            document.getElementById('search-within-time-text').value;
        
        var mode = document.getElementById('mode').value;
        directionsService.route({
          
          origin: origin,
          
          destination: destinationAddress,
          travelMode: google.maps.TravelMode[mode]
        }, function(response, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            var directionsDisplay = new google.maps.DirectionsRenderer({
              map: map,
              directions: response,
              draggable: true,
              polylineOptions: {
                strokeColor: 'green'
              }
            });
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

     
      function searchBoxPlaces(searchBox) {
        hideMarkers(placeMarkers);
        var places = searchBox.getPlaces();
        
        createMarkersForPlaces(places);
        if (places.length == 0) {
          window.alert('We did not find any places matching that search!');
        }
      }

      function textSearchPlaces() {
        var bounds = map.getBounds();
        hideMarkers(placeMarkers);
        var placesService = new google.maps.places.PlacesService(map);
        placesService.textSearch({
          query: document.getElementById('places-search').value,
          bounds: bounds
        }, function(results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            createMarkersForPlaces(results);
          }
        });
      }

      
      function createMarkersForPlaces(places) {
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < places.length; i++) {
          var place = places[i];
          var icon = {
            url: place.icon,
            size: new google.maps.Size(35, 35),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(15, 34),
            scaledSize: new google.maps.Size(25, 25)
          };
          
          var marker = new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location,
            id: place.id
          });
         
          marker.addListener('click', function() {
          getPlacesDetails(this, place);
          });
          placeMarkers.push(marker);
          if (place.geometry.viewport) {
                bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        }
        map.fitBounds(bounds);
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMJREI9NZGQUi9kBNyniHZtfgP9aUWywk&libraries=places,geometry,drawing&callback=initMap"
    ></script>
  </body>
</html>
